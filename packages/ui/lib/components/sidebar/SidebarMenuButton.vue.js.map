{"version":3,"file":"SidebarMenuButton.vue.js","sources":["../../../src/components/sidebar/SidebarMenuButton.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/tooltip'\r\nimport { type Component, computed } from 'vue'\r\nimport SidebarMenuButtonChild, { type SidebarMenuButtonProps } from './SidebarMenuButtonChild.vue'\r\nimport { useSidebar } from './utils'\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n})\r\n\r\nconst props = withDefaults(defineProps<SidebarMenuButtonProps & {\r\n  tooltip?: string | Component\r\n}>(), {\r\n  as: 'button',\r\n  variant: 'default',\r\n  size: 'default',\r\n})\r\n\r\nconst { isMobile, state } = useSidebar()\r\n\r\nconst delegatedProps = computed(() => {\r\n  const { tooltip, ...delegated } = props\r\n  return delegated\r\n})\r\n</script>\r\n\r\n<template>\r\n  <SidebarMenuButtonChild v-if=\"!tooltip\" v-bind=\"{ ...delegatedProps, ...$attrs }\">\r\n    <slot />\r\n  </SidebarMenuButtonChild>\r\n\r\n  <Tooltip v-else>\r\n    <TooltipTrigger as-child>\r\n      <SidebarMenuButtonChild v-bind=\"{ ...delegatedProps, ...$attrs }\">\r\n        <slot />\r\n      </SidebarMenuButtonChild>\r\n    </TooltipTrigger>\r\n    <TooltipContent\r\n      side=\"right\"\r\n      align=\"center\"\r\n      :hidden=\"state !== 'collapsed' || isMobile\"\r\n    >\r\n      <template v-if=\"typeof tooltip === 'string'\">\r\n        {{ tooltip }}\r\n      </template>\r\n      <component :is=\"tooltip\" v-else />\r\n    </TooltipContent>\r\n  </Tooltip>\r\n</template>\r\n"],"names":["props","__props","isMobile","state","useSidebar","delegatedProps","computed","tooltip","delegated"],"mappings":"qkBAUA,MAAMA,EAAQC,EAQR,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIC,aAAW,EAEjCC,EAAiBC,EAAAA,SAAS,IAAM,CACpC,KAAM,CAAE,QAAAC,EAAS,GAAGC,CAAA,EAAcR,EAC3B,OAAAQ,CAAA,CACR"}