{"version":3,"file":"SidebarMenuButton.vue.js","sources":["../../../src/components/sidebar/SidebarMenuButton.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/tooltip'\r\nimport { type Component, computed } from 'vue'\r\nimport SidebarMenuButtonChild, { type SidebarMenuButtonProps } from './SidebarMenuButtonChild.vue'\r\nimport { useSidebar } from './utils'\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n})\r\n\r\nconst props = withDefaults(defineProps<SidebarMenuButtonProps & {\r\n  tooltip?: string | Component\r\n}>(), {\r\n  as: 'button',\r\n  variant: 'default',\r\n  size: 'default',\r\n})\r\n\r\nconst { isMobile, state } = useSidebar()\r\n\r\nconst delegatedProps = computed(() => {\r\n  const { tooltip, ...delegated } = props\r\n  return delegated\r\n})\n</script>\n\n<template>\n  <SidebarMenuButtonChild v-if=\"!tooltip\" v-bind=\"{ ...delegatedProps, ...$attrs }\">\n    <slot />\n  </SidebarMenuButtonChild>\n\n  <Tooltip v-else>\n    <TooltipTrigger as-child>\n      <SidebarMenuButtonChild v-bind=\"{ ...delegatedProps, ...$attrs }\">\n        <slot />\n      </SidebarMenuButtonChild>\n    </TooltipTrigger>\n    <TooltipContent\n      side=\"right\"\n      align=\"center\"\n      :hidden=\"state !== 'collapsed' || isMobile\"\n    >\n      <template v-if=\"typeof tooltip === 'string'\">\n        {{ tooltip }}\n      </template>\n      <component :is=\"tooltip\" v-else />\n    </TooltipContent>\n  </Tooltip>\n</template>\n"],"names":["props","__props","isMobile","state","useSidebar","delegatedProps","computed","tooltip","delegated"],"mappings":"qkBAUA,MAAMA,EAAQC,EAQR,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIC,aAAW,EAEjCC,EAAiBC,EAAAA,SAAS,IAAM,CACpC,KAAM,CAAE,QAAAC,EAAS,GAAGC,CAAA,EAAcR,EAC3B,OAAAQ,CAAA,CACR"}